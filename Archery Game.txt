#include<stdio.h>
#include<GL/freeglut.h>
#include<string.h>
int maxy = 600, count = 0, maxx = 500, n = 2, m = 3, r, q;
int wflag = 0, l1flag = 0;
int count1 = 0, count2 = 0, count3 = 0, count4 = 0, count5 = 0, count6 = 0, count7 = 0, count8 = 0, count9 = 0, count10 = 0;
int x = 25, y = 50;
int x1 = 25, y1 = 50;
char str[10];
void id1();
void id();
void draw_target();
void draw_target1();
void init();
void keys(unsigned char k, int r, int q);
void counting();
void disp();
void disa();

void redraw();
char str_bs[] = "BLOCKSHOOTING";
char str_bl[] = "BLOOK SHOOTING";


/*to display bitmap char*/
void bitmap_output(int x, int y, int z, char *string, void *font)
{
	int len, i;
	glRasterPos2f(x, y);
	len = (int)strlen(string);
	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(font, string[i]);
	}
	return;
}
void again_a() {
	
	glutIdleFunc(id);
	count1 = 0; count2 = 0; count3 = 0; count4 = 0; count5 = 0; count6 = 0; count7 = 0; count8 = 0; count9 = 0; count10 = 0;
	count = 0;
	
	char bs_1[] = "Level 2";
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glColor3f(1, 1, 0);
	bitmap_output(150, 450, 0, bs_1, GLUT_BITMAP_TIMES_ROMAN_24);
	counting();
	//Drawing  of arrow
	glColor3f(0, 1, 1);
	glBegin(GL_LINES);
	glVertex2d(x, y);
	glVertex2d(x + 100, y);
	glEnd();
	glLineWidth(2);
	glBegin(GL_LINES);
	glVertex2d(x, y + 2);
	glVertex2d(x + 100, y - 2);
	glEnd();
	glBegin(GL_LINES);
	glVertex2d(x, y - 2);
	glVertex2d(x + 100, y - 2);
	glEnd();
	glBegin(GL_TRIANGLES);
	glVertex2d(x + 100, y + 3);
	glVertex2d(x + 110, y);
	glVertex2d(x + 100, y - 3);
	glEnd();
	glBegin(GL_QUADS);
	glVertex2d(x, y + 3);
	glVertex2d(x, y - 3);
	glVertex2d(x - 10, y - 5);
	glVertex2d(x - 10, y + 5);
	glEnd();
	draw_target1();
	glFlush();
	glutSwapBuffers();
	//glutIdleFunc(id3);
}
/*based on count display no of arrows and result of game*/
void counting()
{
	sprintf(str, "No of arrows:%d", count);
	bitmap_output(400, 40, 0, str, GLUT_BITMAP_HELVETICA_18);
	if (count >11 && l1flag == 1)
	{
		sprintf(str, "NO of arrows:%d,NO OF ARROWS OVER GAME LOST", count);
		bitmap_output(5, 300, 0, str, GLUT_BITMAP_TIMES_ROMAN_24);
		glutIdleFunc(NULL);
	}
	else if (count > 14 && l1flag == 0)
	{
		sprintf(str, "NO of arrows:%d,NO OF ARROWS OVER GAME LOST", count);
		bitmap_output(5, 300, 0, str, GLUT_BITMAP_TIMES_ROMAN_24);
		glutIdleFunc(NULL);

	}
	else if (count1 == 1 && count2 == 1 && count3 == 1 && count4 == 1 && count5 == 1 && count6 == 1 && count7 == 1 && count8 == 1 && count9 == 1 && count10 == 1)
	{
		glutIdleFunc(NULL);
		char won_1[] = "CONGRATULATIONS YOU WON";
		bitmap_output(5, 300, 0, won_1, GLUT_BITMAP_TIMES_ROMAN_24);
		//l1flag = 1;
		if (l1flag == 0) {
			char won_li[] = "press a to move to next level";
			bitmap_output(5, 275, 0, won_li, GLUT_BITMAP_TIMES_ROMAN_24);
		}
		else if (l1flag == 1) {
			char won_2i[] = "you have successfully completed!!";
			bitmap_output(5, 275, 0, won_2i, GLUT_BITMAP_TIMES_ROMAN_24);
			char won_2li[] = "press q to quit";
			bitmap_output(5, 250, 0, won_2li, GLUT_BITMAP_TIMES_ROMAN_24);
			//Sleep(5000);
			//exit(0);
		}


	}
}
void redraw()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	if (count1 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(300, 450);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(285, 465);
		glVertex2d(315, 465);
		glVertex2d(315, 435);
		glVertex2d(285, 435);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(300, 450);
		glEnd();
	}
	if (count2 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(400, 480);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(385, 495);
		glVertex2d(415, 495);
		glVertex2d(415, 465);
		glVertex2d(385, 465);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(400, 480);
		glEnd();
	}
	if (count3 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(375, 400);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(360, 415);
		glVertex2d(390, 415);
		glVertex2d(390, 385);
		glVertex2d(360, 385);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(375, 400);
		glEnd();
	}
	if (count4 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(250, 370);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(235, 385);
		glVertex2d(265, 385);
		glVertex2d(265, 355);
		glVertex2d(235, 355);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(250, 370);
		glEnd();
	}
	if (count5 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(350, 330);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(335, 345);
		glVertex2d(365, 345);
		glVertex2d(365, 315);
		glVertex2d(335, 315);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(350, 330);
		glEnd();
	}
	if (count6 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(450, 290);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(435, 305);
		glVertex2d(465, 305);
		glVertex2d(465, 275);
		glVertex2d(435, 275);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(450, 290);
		glEnd();
	}
	if (count7 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(330, 245);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(315, 260);
		glVertex2d(345, 260);
		glVertex2d(345, 230);
		glVertex2d(315, 230);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(330, 245);
		glEnd();
	}
	if (count8 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(200, 200);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(185, 215);
		glVertex2d(215, 215);
		glVertex2d(215, 185);
		glVertex2d(185, 185);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(200, 200);
		glEnd();
	}
	if (count9 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(400, 150);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(385, 165);
		glVertex2d(415, 165);
		glVertex2d(415, 135);
		glVertex2d(385, 135);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(400, 150);
		glEnd();
	}
	if (count10 == 0)
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bs, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glPointSize(30);
		glColor3f(1, 0, 1);
		glBegin(GL_POINTS);
		glVertex2d(300, 100);
		glEnd();
		glColor3f(0, 1, 1);
		glBegin(GL_LINE_LOOP);
		glVertex2d(285, 115);
		glVertex2d(315, 115);
		glVertex2d(315, 85);
		glVertex2d(285, 85);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, str_bl, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(300, 100);
		glEnd();
	}
	glColor3f(0, 1, 1);
	glBegin(GL_LINES);
	glVertex2d(x, y);
	glVertex2d(x = 100, y);
	glEnd();
	glLineWidth(2);
	glBegin(GL_LINES);
	glVertex2d(x, y + 2);
	glVertex2d(x + 100, y + 2);
	glEnd();
	glBegin(GL_LINES);
	glVertex2d(x, y - 2);
	glVertex2d(x + 100, y - 2);
	glEnd();
	glBegin(GL_TRIANGLES);
	glVertex2d(x + 100, y + 3);
	glVertex2d(x + 110, y);
	glVertex2d(x + 100, y - 3);
	glEnd();
	glBegin(GL_QUADS);
	glVertex2d(x, y + 3);
	glVertex2d(x, y - 3);
	glVertex2d(x - 10, y - 5);
	glVertex2d(x - 10, y + 5);
	glEnd();
	glFinish();
	glutSwapBuffers();
}
//TO CHECK WHETHER ARROW HITS TARGET
void disa()
{
	if ((x + 110 == 300) && (y >= 435 && y <= 465) && (!count1))
	{
		count1 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 375) && (y >= 385 && y <= 415) && (!count2))
	{
		count2 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 399) && (y >= 465 && y <= 495) && (!count3))
	{
		count3 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 249) && (y >= 355 && y <= 385) && (!count4))

	{
		count4 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 351) && (y >= 315 && y <= 345) && (!count5))
	{
		count5 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 450) && (y >= 275 && y <= 305) && (!count6))
	{
		count6 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 330) && (y >= 230 && y <= 260) && (!count7))
	{
		count7 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 201) && (y >= 185 && y <= 215) && (!count8))
	{
		count8 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 339) && (y >= 135 && y <= 165) && (!count9))
	{
		count9 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
	else if ((x + 110 == 300) && (y >= 85 && y <= 115) && (!count10))
	{
		count10 = 1;
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
	}
}

/*to move arrow up*/
void id()
{
	y += n;
	if (l1flag != 1) {
		Sleep(20);
		
	}
	else
	{
		Sleep(10);
		
	}
	disa();
	if (y > maxy)
	{
		y = 0;
		if (l1flag != 1) {
			Sleep(1000);
			
		}
		else
		{
			Sleep(500);
		}
		
		count++;
	}
	glutPostRedisplay();
}
//to draw arrow
void disp()
{
	glFlush();
	if (wflag == 0) {
		glClear(GL_COLOR_BUFFER_BIT);
		char p[] = "A Mini Project For Computer Graphics & Visualization Laboratery";
		char h[] = "Archery";
		//char w[] = "Welcome";
		char st[] = "Click 's' To Start";
		//char cli[] = "CLICK AND HOLD LEFT MOUSE BUTTON TO GO UP RELEASE TO GO DOWN";
		char vkit[] = "Vivekananda Institute Of Technology";
		char nameRN1[] = "Rakesh R";
		char nameRN2[] = "Prerit S Sobhani";
		char usn1[] = "1VK16CS056";
		char usn2[] = "1VK16CS053";
		char cse[] = "Department Of CSE";
		char gu[] = "Under the guidance of: ";
		char sir[] = "S Suresh Kumar";
		char phd[] = "B.E,M.Tech,(Ph.D)";
		char asst[] = "Asst. Prof of VKIT";

		glColor3f(0.0, 0.5, 0.7);

		glColor3f(0.5, 1.0, 1.0);
		bitmap_output(170, 450, 0, vkit, GLUT_BITMAP_HELVETICA_18);
		bitmap_output(210, 428, 0, cse, GLUT_BITMAP_HELVETICA_18);


		glColor3f(0.5, 1.0, 0.0);
		bitmap_output(100, 400, 0, p, GLUT_BITMAP_HELVETICA_18);
		bitmap_output(220, 380, 0, h, GLUT_BITMAP_TIMES_ROMAN_24);

		bitmap_output(80, 340, 0, nameRN1, GLUT_BITMAP_HELVETICA_18);
		bitmap_output(70, 320, 0, usn1, GLUT_BITMAP_HELVETICA_18);

		bitmap_output(350, 340, 0, nameRN2, GLUT_BITMAP_HELVETICA_18);
		bitmap_output(355, 320, 0, usn2, GLUT_BITMAP_HELVETICA_18);

		glColor3f(0.0, 0.0, 0.8);
		bitmap_output(200, 272, 0, gu, GLUT_BITMAP_HELVETICA_18);
		bitmap_output(190, 260, 0, sir, GLUT_BITMAP_HELVETICA_18);

		bitmap_output(265, 258, 0, phd, GLUT_BITMAP_HELVETICA_10);
		bitmap_output(200, 248, 0, asst, GLUT_BITMAP_9_BY_15);
		glColor3f(1.0, 0.0, 0.0);
		//bitmap_output(40, 150, 0, w, GLUT_BITMAP_TIMES_ROMAN_24);

		bitmap_output(210, 120, 0, st, GLUT_BITMAP_TIMES_ROMAN_24);
		//bitmap_output(17, 120, 0, cli, GLUT_BITMAP_9_BY_15);
		glColor3f(0.0, 0.0, 0.0);

		glutSwapBuffers();
		glFlush();

	}
	else if (wflag == 50 && l1flag == 0)
	{
		char bs_1[] = "Level 1";
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glLoadIdentity();
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, bs_1, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		//Drawing  of arrow
		glColor3f(0, 1, 1);
		glBegin(GL_LINES);
		glVertex2d(x, y);
		glVertex2d(x + 100, y);
		glEnd();
		glLineWidth(2);
		glBegin(GL_LINES);
		glVertex2d(x, y + 2);
		glVertex2d(x + 100, y - 2);
		glEnd();
		glBegin(GL_LINES);
		glVertex2d(x, y - 2);
		glVertex2d(x + 100, y - 2);
		glEnd();
		glBegin(GL_TRIANGLES);
		glVertex2d(x + 100, y + 3);
		glVertex2d(x + 110, y);
		glVertex2d(x + 100, y - 3);
		glEnd();
		glBegin(GL_QUADS);
		glVertex2d(x, y + 3);
		glVertex2d(x, y - 3);
		glVertex2d(x - 10, y - 5);
		glVertex2d(x - 10, y + 5);
		glEnd();
		draw_target();
		glFlush();
		glutSwapBuffers();

	}
	if (wflag == 50 && l1flag == 1)
	{
		char bs_1[] = "Level 2";
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glLoadIdentity();
		glColor3f(1, 1, 0);
		bitmap_output(150, 450, 0, bs_1, GLUT_BITMAP_TIMES_ROMAN_24);
		counting();
		//Drawing  of arrow
		glColor3f(0, 1, 1);
		glBegin(GL_LINES);
		glVertex2d(x, y);
		glVertex2d(x + 100, y);
		glEnd();
		glLineWidth(2);
		glBegin(GL_LINES);
		glVertex2d(x, y + 2);
		glVertex2d(x + 100, y - 2);
		glEnd();
		glBegin(GL_LINES);
		glVertex2d(x, y - 2);
		glVertex2d(x + 100, y - 2);
		glEnd();
		glBegin(GL_TRIANGLES);
		glVertex2d(x + 100, y + 3);
		glVertex2d(x + 110, y);
		glVertex2d(x + 100, y - 3);
		glEnd();
		glBegin(GL_QUADS);
		glVertex2d(x, y + 3);
		glVertex2d(x, y - 3);
		glVertex2d(x - 10, y - 5);
		glVertex2d(x - 10, y + 5);
		glEnd();
		draw_target();
		glFlush();
		glutSwapBuffers();
	}

}

void init()
{
	glClearColor(0, 0, 0, 1);
	glColor3f(1, 0, 0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, 500, 0, 500);
	glMatrixMode(GL_MODELVIEW);
}

//to draw the target inside the loop

void draw_target()
{
	if (count1 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(300, 450);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(285, 465);
		glVertex2d(315, 465);
		glVertex2d(315, 435);
		glVertex2d(285, 435);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(300, 450);
		glEnd();
	}
	if (count2 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(375, 400);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(360, 415);
		glVertex2d(390, 415);
		glVertex2d(390, 385);
		glVertex2d(360, 385);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(375, 400);
		glEnd();
	}
	if (count3 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(400, 480);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(385, 495);
		glVertex2d(415, 495);
		glVertex2d(415, 465);
		glVertex2d(385, 465);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(400, 480);
		glEnd();
	}
	if (count4 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(250, 370);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(235, 385);
		glVertex2d(265, 385);
		glVertex2d(265, 355);
		glVertex2d(235, 355);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(250, 370);
		glEnd();
	}
	if (count5 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(350, 330);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(335, 345);
		glVertex2d(365, 345);
		glVertex2d(365, 315);
		glVertex2d(335, 315);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(350, 330);
		glEnd();
	}
	if (count6 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(450, 290);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(435, 305);
		glVertex2d(465, 305);
		glVertex2d(465, 275);
		glVertex2d(435, 275);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(450, 290);
		glEnd();
	}
	if (count7 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(330, 245);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(315, 260);
		glVertex2d(345, 260);
		glVertex2d(345, 230);
		glVertex2d(315, 230);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(330, 245);
		glEnd();
	}
	if (count8 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(200, 200);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(185, 215);
		glVertex2d(215, 215);
		glVertex2d(215, 185);
		glVertex2d(185, 185);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(200, 200);
		glEnd();
	}
	if (count9 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(400, 150);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(385, 165);
		glVertex2d(415, 165);
		glVertex2d(415, 135);
		glVertex2d(385, 135);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(400, 150);
		glEnd();
	}
	if (count10 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(300, 100);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(285, 115);
		glVertex2d(315, 115);
		glVertex2d(315, 85);
		glVertex2d(285, 85);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(300, 100);
		glEnd();
	}
	glFlush();
}
void draw_target1()
{
	if (count1 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(300, 450);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(285, 465);
		glVertex2d(315, 465);
		glVertex2d(315, 435);
		glVertex2d(285, 435);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(300, 450);
		glEnd();
	}
	if (count2 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(375, 400);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(360, 415);
		glVertex2d(390, 415);
		glVertex2d(390, 385);
		glVertex2d(360, 385);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(375, 400);
		glEnd();
	}
	if (count3 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(400, 480);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(385, 495);
		glVertex2d(415, 495);
		glVertex2d(415, 465);
		glVertex2d(385, 465);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(400, 480);
		glEnd();
	}
	if (count4 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(250, 370);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(235, 385);
		glVertex2d(265, 385);
		glVertex2d(265, 355);
		glVertex2d(235, 355);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(250, 370);
		glEnd();
	}
	if (count5 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(350, 330);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(335, 345);
		glVertex2d(365, 345);
		glVertex2d(365, 315);
		glVertex2d(335, 315);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(350, 330);
		glEnd();
	}
	if (count6 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(450, 290);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(435, 305);
		glVertex2d(465, 305);
		glVertex2d(465, 275);
		glVertex2d(435, 275);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(450, 290);
		glEnd();
	}
	if (count7 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(330, 245);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(315, 260);
		glVertex2d(345, 260);
		glVertex2d(345, 230);
		glVertex2d(315, 230);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(330, 245);
		glEnd();
	}
	if (count8 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(200, 200);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(185, 215);
		glVertex2d(215, 215);
		glVertex2d(215, 185);
		glVertex2d(185, 185);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(200, 200);
		glEnd();
	}
	if (count9 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(400, 150);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(385, 165);
		glVertex2d(415, 165);
		glVertex2d(415, 135);
		glVertex2d(385, 135);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(400, 150);
		glEnd();
	}
	if (count10 == 0)
	{
		glColor3f(1, 0, 1);
		glPointSize(30);
		glBegin(GL_POINTS);
		glVertex2d(300, 100);
		glEnd();
		glBegin(GL_LINE_LOOP);
		glVertex2d(285, 115);
		glVertex2d(315, 115);
		glVertex2d(315, 85);
		glVertex2d(285, 85);
		glEnd();
	}
	else
	{
		glColor3f(1, 1, 1);
		glPointSize(20);
		glBegin(GL_POINTS);
		glVertex2d(300, 100);
		glEnd();
	}
	glFlush();
}

//to move the arrow left when ‘r’ pressed
void id1()
{
	x += m;
	disa();
	if (x + 110 > maxx)
	{
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id);
			
	}
	glutPostRedisplay();
}
/*void id4()
{
	x += m;
	disa1();
	if (x + 110 > maxx)
	{
		x = 25;
		y = 0;
		count++;
		glutIdleFunc(id3);
	}
	glutPostRedisplay();
}*/
//set key to perform desired operation
void keys(unsigned char k, int r, int q)
{
	if (k == 's') {
		wflag = 50;
		glutIdleFunc(id);
	}
	if (k == 'r')
		glutIdleFunc(id1);
	
	if (k == 'q')
		exit(0);
	if (k == 'a') {
		again_a();
		l1flag = 1;
		
	}

}

void mouse(int btn, int state, int x, int y)
{
	if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
		glutIdleFunc(id1);

}
int main(int argc, char **argv)
{

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(900, 900);
	glutCreateWindow("archery");

	glutDisplayFunc(disp);

	glutMouseFunc(mouse);
	glutKeyboardFunc(keys);
	init();

	glutMainLoop();
	return 0;
}